USE supermarket;

-- 1. Sales Analysis
-- 1.1 Total Sales per Branch: Calculate the total sales for each branch.
SELECT b.branch_id, b.city, SUM(i.total) AS total_sales FROM branch b
JOIN invoice i ON b.customer_id = i.customer_id
GROUP BY b.branch_id, b.city;

-- 1.2 Sales by Product Line: Determine which product lines generate the most revenue.
SELECT p.product_line, SUM(i.total) AS total_sales FROM product p
JOIN invoice i ON p.customer_id = i.customer_id
GROUP BY p.product_line
ORDER BY total_sales DESC;

-- 1.3 Sales Trends Over Time: Analyze sales trends over different periods (daily, monthly, yearly). 
SELECT DATE_FORMAT(i.date_, '%Y-%m') AS month, SUM(i.total) AS total_sales FROM invoice i
GROUP BY month
ORDER BY month;

-- 1.4 Branch rating > 9 
SELECT branch_id, city, rating
FROM branch
WHERE rating > 9
ORDER BY rating DESC;

SELECT branch_id, city, rating
FROM branch
WHERE rating > 9 AND branch_id = 'A'
ORDER BY rating DESC;

SELECT branch_id, city, rating
FROM branch
WHERE rating > 9 AND branch_id = 'B'
ORDER BY rating DESC;

SELECT branch_id, city, rating
FROM branch
WHERE rating > 9 AND branch_id = 'C'
ORDER BY rating DESC;



-- 1.5 average rating of each branch 
SELECT branch_id, city, AVG(rating) AS average_rating FROM branch
GROUP BY branch_id, city
ORDER BY average_rating DESC;

-- 1.6 branch with the highest gross income 
SELECT b.branch_id, b.city, SUM(r.gross_income) AS total_gross_income FROM branch b
JOIN invoice i ON b.customer_id = i.customer_id
JOIN revenue r ON i.invoice_id = r.invoice_id
GROUP BY b.branch_id, b.city
ORDER BY total_gross_income DESC;

-- 1.7 8... 

-- 2. Customer Analysis
-- 2.1 Customer Demographics: Understand the breakdown of customer types and genders.
SELECT c.customer_type, c.gender, COUNT(*) AS count FROM customer c
GROUP BY c.customer_type, c.gender;

-- 2.2 Customer Spending: Identify the spending patterns of different types of customers.
SELECT c.customer_type, SUM(i.total) AS total_spent FROM customer c
JOIN invoice i ON c.customer_id = i.customer_id
GROUP BY c.customer_type;

SELECT customer_type, AVG(total_spent) AS average_sales
FROM (
    SELECT c.customer_type, SUM(i.total) AS total_spent
    FROM customer c
    JOIN invoice i ON c.customer_id = i.customer_id
    GROUP BY c.customer_type
) AS customer_spending
GROUP BY customer_type;


-- 3. Product Performance
-- 3.1 Best-Selling Products: Identify which products are selling the most.
SELECT p.product_line, SUM(i.quantity) AS total_quantity_sold FROM product p
JOIN invoice i ON p.customer_id = i.customer_id
GROUP BY p.product_line
ORDER BY total_quantity_sold DESC;

-- 3.2 Product Line Revenue: Calculate the revenue generated by each product line.
SELECT p.product_line, SUM(i.total) AS total_revenue FROM product p
JOIN invoice i ON p.customer_id = i.customer_id
GROUP BY p.product_line
ORDER BY total_revenue DESC;

-- 3.3 Product line with the highest profit 
SELECT p.product_line, SUM(r.gross_income) AS total_gross_income
FROM product p
JOIN invoice i ON p.customer_id = i.customer_id
JOIN revenue r ON i.invoice_id = r.invoice_id
GROUP BY p.product_line
ORDER BY total_gross_income DESC;

-- 3.4 the most selling product line in each branch 
SELECT branch_id, city, product_line, total_quantity_sold
FROM (
    SELECT b.branch_id, b.city, p.product_line, SUM(i.quantity) AS total_quantity_sold,
           ROW_NUMBER() OVER (PARTITION BY b.branch_id ORDER BY SUM(i.quantity) DESC) AS row_num
    FROM branch b
    JOIN invoice i ON b.customer_id = i.customer_id
    JOIN product p ON i.customer_id = p.customer_id
    GROUP BY b.branch_id, b.city, p.product_line
) AS branch_product_sales
WHERE row_num = 1;

-- 4. Financial Analysis
-- 4.1 Profitability Analysis: Determine the overall profitability by calculating profit margins.
SELECT i.invoice_id, r.gross_income AS profit FROM revenue r
JOIN invoice i ON r.invoice_id = i.invoice_id;

-- 5. Operational Analysis
-- 5.1 Branch Ratings: Analyze the ratings of different branches.
SELECT b.branch_id, b.city, b.rating FROM branch b
ORDER BY b.rating DESC;

-- 5.2 Payment Methods: Evaluate the popularity of different payment methods.
SELECT i.payment, COUNT(*) AS count FROM invoice i
GROUP BY i.payment
ORDER BY count DESC;












